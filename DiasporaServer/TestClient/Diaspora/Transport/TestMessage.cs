// automatically generated by the FlatBuffers compiler, do not modify

namespace Diaspora.Transport
{

using System;
using FlatBuffers;

public struct TestMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TestMessage GetRootAsTestMessage(ByteBuffer _bb) { return GetRootAsTestMessage(_bb, new TestMessage()); }
  public static TestMessage GetRootAsTestMessage(ByteBuffer _bb, TestMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TestMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vec3? Pos { get { int o = __p.__offset(4); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTestMessage(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Vec3> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static Offset<TestMessage> EndTestMessage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TestMessage>(o);
  }
  public static void FinishTestMessageBuffer(FlatBufferBuilder builder, Offset<TestMessage> offset) { builder.Finish(offset.Value); }
};


}
